AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Miztiik Incident Response Template
Parameters:
  enableDEBUGGER:
    Description: Do you want to enable logging.
    Default: 'False'
    Type: String
    AllowedValues:
    - 'True'
    - 'False'
    ConstraintDescription: Must be boolean.
  SecurityContactEmail:
    Description: Email address to receive notifications. Must be a valid email address.
    Default: youremail@example.com
    Type: String
    AllowedPattern: ^(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$
  stackNameSuffix:
    Description: Suffix to append to the Lambda functions.
    Type: String
    Default: Miztiik-InfoSec
Globals:
  Function:
    Runtime: python3.7
    Timeout: 10
    Tracing: Active
    MemorySize: 128
    Environment:
      Variables:
        DEBUG_MODE:
          Ref: enableDEBUGGER
    Tags:
      Organisation:
        Ref: stackNameSuffix
      Code: https://github.com/miztiik/security-incident-response-instance-isolation
Resources:
  qurantineEc2InstanceFn:
    Type: AWS::Serverless::Function
    Properties:
      Description: Attaches the instance a SG with no rules so it cannott communicate
        with the outside world
      FunctionName:
        Fn::Sub: quarantine_ec2_instance_fn_${stackNameSuffix}
      Handler: quarantine_ec2_instance.lambda_handler
      Runtime: python3.7
      CodeUri: s3://sam-templates-011/9bdc0c45483b21a0b300722ab82592e0
      Environment:
        Variables:
          ENABLE_DEBUG:
            Ref: enableDEBUGGER
      MemorySize: 128
      Timeout: 15
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  quarantineEc2InstanceSnapshotFn:
    Type: AWS::Serverless::Function
    Properties:
      Description: Takes a snapshot of the given instance ID
      FunctionName:
        Fn::Sub: quarantine_ec2_instance_snapshot_fn_${stackNameSuffix}
      Handler: quarantine_ec2_instance_snapshot.lambda_handler
      Runtime: python3.7
      CodeUri: s3://sam-templates-011/9d0e179d78dc7b6f29e0ad21f568f7d8
      Environment:
        Variables:
          ENABLE_DEBUG:
            Ref: enableDEBUGGER
      MemorySize: 128
      Timeout: 180
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  quarantineIamRoleFn:
    Type: AWS::Serverless::Function
    Properties:
      Description: Attaches a DENY ALL Permission to given IAM Role Name
      FunctionName:
        Fn::Sub: quarantine_iam_role_fn_${stackNameSuffix}
      Handler: quarantine_iam_role.lambda_handler
      Runtime: python3.7
      CodeUri: s3://sam-templates-011/d8feef991c9bb6f98ef0febadcb46834
      Environment:
        Variables:
          ENABLE_DEBUG:
            Ref: enableDEBUGGER
      MemorySize: 128
      Timeout: 60
      Role:
        Fn::GetAtt:
        - iamRoleQurantineExecutionRole
        - Arn
  incidentResponseStateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: StatesExecutionRole
    Properties:
      StateMachineName:
        Fn::Sub: incidentResponseStateMachine-${stackNameSuffix}
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Isolate compromised EC2 Instance & Snapshot\
          \ for Investigation\",\n  \"StartAt\": \"ec2IncidentResponse\",\n  \"States\"\
          : {\n    \"ec2IncidentResponse\": {\n      \"Type\": \"Parallel\",\n   \
          \   \"Next\":\"result\",\n      \"Branches\": [\n        {\n          \"\
          StartAt\": \"quarantineEc2InstanceSnapshot\",\n          \"States\": {\n\
          \            \"quarantineEc2InstanceSnapshot\": {\n              \"Type\"\
          : \"Task\",\n              \"Resource\": \"${quarantineEc2InstanceSnapshotFn.Arn}\"\
          ,\n              \"InputPath\": \"$\",\n              \"ResultPath\": \"\
          $\",\n              \"OutputPath\": \"$\",\n              \"End\": true,\n\
          \              \"Retry\": [\n                {\n                  \"ErrorEquals\"\
          : [\n                    \"States.ALL\"\n                  ],\n        \
          \          \"IntervalSeconds\": 1,\n                  \"MaxAttempts\": 3,\n\
          \                  \"BackoffRate\": 2\n                }\n             \
          \ ]\n            }\n          }\n        },\n        {\n          \"StartAt\"\
          : \"quarantineEc2Instance\",\n          \"States\": {\n            \"quarantineEc2Instance\"\
          : {\n              \"Type\": \"Task\",\n              \"Resource\": \"${qurantineEc2InstanceFn.Arn}\"\
          ,\n              \"InputPath\": \"$\",\n              \"ResultPath\": \"\
          $\",\n              \"OutputPath\": \"$\",\n              \"End\": true,\n\
          \              \"Retry\": [\n                {\n                  \"ErrorEquals\"\
          : [\n                    \"States.ALL\"\n                  ],\n        \
          \          \"IntervalSeconds\": 1,\n                  \"MaxAttempts\": 3,\n\
          \                  \"BackoffRate\": 2\n                }\n             \
          \ ]\n            }\n          }\n        },\n        {\n          \"StartAt\"\
          : \"quarantineIamRole\",\n          \"States\": {\n            \"quarantineIamRole\"\
          : {\n              \"Type\": \"Task\",\n              \"Resource\": \"${quarantineIamRoleFn.Arn}\"\
          ,\n              \"InputPath\": \"$\",\n              \"ResultPath\": \"\
          $\",\n              \"OutputPath\": \"$\",\n              \"End\": true,\n\
          \              \"Retry\": [\n                {\n                  \"ErrorEquals\"\
          : [\n                    \"States.ALL\"\n                  ],\n        \
          \          \"IntervalSeconds\": 1,\n                  \"MaxAttempts\": 3,\n\
          \                  \"BackoffRate\": 2\n                }\n             \
          \ ]\n            }\n          }\n        }\n      ]\n    },\n  \"result\"\
          :{\n    \"InputPath\": \"$\",\n    \"ResultPath\": \"$\",\n    \"OutputPath\"\
          : \"$\",\n    \"Type\": \"Pass\",\n    \"End\": true\n  }\n  }\n}\n"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - states.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  LambdaExecutionRoleAddonPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IncidentResponseInfoSecPolicy
      PolicyDocument:
        Statement:
        - Sid: Ec2QurantinePermissions
          Effect: Allow
          Action:
          - ec2:RevokeSecurityGroupIngress
          - ec2:DescribeSecurityGroupReferences
          - ec2:RevokeSecurityGroupEgress
          - ec2:ApplySecurityGroupsToClientVpnTargetNetwork
          - ec2:DescribeSecurityGroups
          - ec2:CreateSecurityGroup
          - ec2:DescribeInstances
          - ec2:CreateTags
          - ec2:StopInstances
          - ec2:CreateVolume
          - ec2:CreateSnapshots
          - ec2:CreateSnapshot
          - ec2:DescribeSnapshots
          - ec2:ModifyInstanceAttribute
          Resource: '*'
      Roles:
      - Ref: LambdaExecutionRole
  iamRoleQurantineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - states.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  iamRoleQurantineExecutionRoleAddonPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IncidentResponseInfoSecQurantineRolePolicy
      PolicyDocument:
        Statement:
        - Sid: IamRoleQurantinePermissions
          Effect: Allow
          Action:
          - iam:CreatePolicy
          - iam:GetPolicyVersion
          - iam:GetPolicy
          - iam:AttachRolePolicy
          - iam:CreatePolicyVersion
          Resource: '*'
      Roles:
      - Ref: iamRoleQurantineExecutionRole
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - qurantineEc2InstanceFn
              - Arn
            - Fn::GetAtt:
              - quarantineEc2InstanceSnapshotFn
              - Arn
            - Fn::GetAtt:
              - quarantineIamRoleFn
              - Arn
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to invoke state machine on GuardDuty Finding
      EventPattern:
        source:
        - aws.guardduty
        detail:
          type:
          - UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration
      Name: Trigger_Qurantine_Ops
      State: ENABLED
      Targets:
      - Arn:
          Ref: incidentResponseStateMachine
        Id: trigger_qurantine_ops_target
        RoleArn:
          Fn::GetAtt:
          - CwExecuteStateMachineRole
          - Arn
      - Arn:
          Ref: GuardDutySNSTopic
        Id: GuardDutySNSTopic-EC2-IAM
        InputTransformer:
          InputTemplate: '"GuardDuty Finding | ID:<gdid>: An EC2 instance IAM credentials
            (Role: <userName>) may be compromised and should be investigated. Go to
            https://console.aws.amazon.com/guardduty"'
          InputPathsMap:
            userName: $.detail.resource.accessKeyDetails.userName
            gdid: $.detail.id
  CwExecuteStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowCWEServiceToAssumeRole
          Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - events.amazonaws.com
      Path: /
      Policies:
      - PolicyName: ExecuteStateMachine
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              Ref: incidentResponseStateMachine
  GuardDutySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: GDSNS
      Subscription:
      - Endpoint:
          Ref: SecurityContactEmail
        Protocol: email
  GuardDutySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ID-GD-Topic-Policy
        Version: '2012-10-17'
        Statement:
        - Sid: GuardDutyNotifier
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: GuardDutySNSTopic
      Topics:
      - Ref: GuardDutySNSTopic
Outputs:
  StateMachineArn:
    Description: ARN for the Step Functions state machine
    Value:
      Fn::Join:
      - ''
      - - https://console.aws.amazon.com/states/home?region=
        - Ref: AWS::Region
        - '#/statemachines/view/'
        - Ref: incidentResponseStateMachine
